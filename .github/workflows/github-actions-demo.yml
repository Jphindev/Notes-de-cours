#This file must got to {repo}/.github/workflows/
#Template here:
# https://github.com/ExamProCo/Github-Examples/tree/main
# https://github.com/n3wt0n/ActionsTest

name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: #[push, label] #the event that will trigger the workflow or with more details:
  #workflow_dispatch: #trigger the workflow manually
  push:
    branches:
      - ghactions-demo
      - "!features/**" #excluding branches with filters
    tags-ignore: #excluding tags
      - v2
      - v1.*
    paths:
      - "**.yml" #including files with filters
  label:
    types:
      - deleted
  schedule:
    - cron: "30 5,17 28 2 1,3" # minutes hours day month dayname
    #at 5h30 or 17h30 on the 28th day of february on a monday or wednesday
  issues:
    types:
      - edited
      - closed

env: #global variables here, available for the entire workflow
  DAY_OF_WEEK: Monday

jobs:
  #GITHUB REFS
  Explore-GitHub-Actions: #no spaces in the job's name
    if: false #to disable the job
    name: Explore GitHub Actions #name of the job (optional)
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
        #run: execute a command on the runner
        shell: bash #specify which shell to use
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code #name of the step (optional)
        uses: actions/checkout@v4 #checkout the repository to allow to run scripts relative to its code
      - uses: actions/setup-node@v4 #install node to use node and npm commands
        with:
          node-version: "20"
      - run: npm install bats
      - run: npx bats -v
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "🍏 This job's status is ${{ job.status }}."

  #GITHUB VARIABLES
  Variables:
    if: false #to disable the job
    runs-on: ubuntu-latest
    permissions:
      issues: write
    env: #variables here are only available for this job
      Greeting: Hello
    steps:
      - name: Display local variables using env.VAR or $VAR
        if: ${{ env.DAY_OF_WEEK == 'Monday' }}
        run: echo "$Greeting $First_Name. Today is $DAY_OF_WEEK!" #Hello Mona. Today is Monday!
        env: #variables here are only available for this step
          First_Name: Mona
      - name: Display variable defined in github options using vars.VARNAME
        run: echo "${{ vars.SUPERVAR }}"
      - name: Retrieve a secret variable defined in github using secrets.VARSECRET
        env:
          super_secret: ${{ secrets.SUPERSECRET }}
        run: |
          echo "$super_secret"
      # https://github.com/actions/first-interaction -> user/repo@version
      - uses: actions/first-interaction@v1 #write a message when the first issue is created
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          issue-message: |
            # Message with markdown.
            "Hello ${{ github.actor }}, thank you for the ${{ github.event_name }}!"

  #NEEDS
  dep-job-1-setup:
    if: false #to disable the job
    # Calling a reusable workflow:
    # uses: ./.github/workflows/reusable-workflow.yml
    # uses: github.com/{owner}/{repo}/.github/workflows/reusable-workflow.yml
    runs-on: ubuntu-latest
    steps:
      - run: echo "Setup job done"
  dep-job-2-build:
    needs: dep-job-1-setup #the build job will run only after the setup job, not in parallel
    runs-on: ubuntu-latest
    steps:
      - run: echo "Build job done"
  dep-job-3-test:
    if: ${{ always() }} #the test job will run even if the prerequisite jobs fails
    needs: [dep-job-1-setup, dep-job-2-build]
    strategy:
      matrix: #to test the code in multiple versions of a language or on multiple operating systems
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "Test job done on ${{ matrix.os }}"

  #CONDITIONS
  triage:
    #condition on the job
    if: >-
      github.event_name == 'push' && 
      github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - if: github.actor == 'Jphindev' #condition on the step
        run: echo "Triage job done"

  #AUTOMATIC COMMENT ON NEW ISSUES
  #This will only work with on: issues only
  comment-with-action:
    if: false #to disable the job
    runs-on: ubuntu-latest
    steps:
      - name: "dump github context"
        run: echo "${{ toJSON(github) }}" #to retrieve the context variables that we can use
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            This is a multi-line test comment
            - With GitHub **Markdown** :sparkles:
            - Created by [create-or-update-comment][1]

            [1]: https://github.com/peter-evans/create-or-update-comment
          reactions: "+1"

  comment-with-api:
    if: false
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Create comment with API
        #using \ to run a command on multiple lines
        run: |
          gh api -X POST \
            https://api.github.com/repos/$ORGANIZATION/$REPOSITORY/issues/$ISSUE_NUMBER/comments \
            -f body="Comment but from the API"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} #required when using the GitHub API
          ORGANIZATION: ${{ github.event.repository.owner.login }}
          REPOSITORY: ${{ github.event.repository.name }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
